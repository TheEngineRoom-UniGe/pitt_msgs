// Generated by gencpp from file pitt_msgs/TrackedShape.msg
// DO NOT EDIT!


#ifndef PITT_MSGS_MESSAGE_TRACKEDSHAPE_H
#define PITT_MSGS_MESSAGE_TRACKEDSHAPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pitt_msgs
{
template <class ContainerAllocator>
struct TrackedShape_
{
  typedef TrackedShape_<ContainerAllocator> Type;

  TrackedShape_()
    : object_id(0)
    , x_pc_centroid(0.0)
    , y_pc_centroid(0.0)
    , z_pc_centroid(0.0)
    , shape_tag()
    , coefficients()
    , x_est_centroid(0.0)
    , y_est_centroid(0.0)
    , z_est_centroid(0.0)  {
    }
  TrackedShape_(const ContainerAllocator& _alloc)
    : object_id(0)
    , x_pc_centroid(0.0)
    , y_pc_centroid(0.0)
    , z_pc_centroid(0.0)
    , shape_tag(_alloc)
    , coefficients(_alloc)
    , x_est_centroid(0.0)
    , y_est_centroid(0.0)
    , z_est_centroid(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _object_id_type;
  _object_id_type object_id;

   typedef float _x_pc_centroid_type;
  _x_pc_centroid_type x_pc_centroid;

   typedef float _y_pc_centroid_type;
  _y_pc_centroid_type y_pc_centroid;

   typedef float _z_pc_centroid_type;
  _z_pc_centroid_type z_pc_centroid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _shape_tag_type;
  _shape_tag_type shape_tag;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _coefficients_type;
  _coefficients_type coefficients;

   typedef float _x_est_centroid_type;
  _x_est_centroid_type x_est_centroid;

   typedef float _y_est_centroid_type;
  _y_est_centroid_type y_est_centroid;

   typedef float _z_est_centroid_type;
  _z_est_centroid_type z_est_centroid;




  typedef boost::shared_ptr< ::pitt_msgs::TrackedShape_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pitt_msgs::TrackedShape_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedShape_

typedef ::pitt_msgs::TrackedShape_<std::allocator<void> > TrackedShape;

typedef boost::shared_ptr< ::pitt_msgs::TrackedShape > TrackedShapePtr;
typedef boost::shared_ptr< ::pitt_msgs::TrackedShape const> TrackedShapeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pitt_msgs::TrackedShape_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pitt_msgs::TrackedShape_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pitt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/indigo/share/pcl_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'pitt_msgs': ['/home/carlotta/catkin_ws/src/pitt_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pitt_msgs::TrackedShape_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pitt_msgs::TrackedShape_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pitt_msgs::TrackedShape_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pitt_msgs::TrackedShape_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pitt_msgs::TrackedShape_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pitt_msgs::TrackedShape_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pitt_msgs::TrackedShape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfa2fabb661556e61bbf8aa4dbcd25b0";
  }

  static const char* value(const ::pitt_msgs::TrackedShape_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfa2fabb661556e6ULL;
  static const uint64_t static_value2 = 0x1bbf8aa4dbcd25b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::pitt_msgs::TrackedShape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pitt_msgs/TrackedShape";
  }

  static const char* value(const ::pitt_msgs::TrackedShape_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pitt_msgs::TrackedShape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header header\n\
\n\
int64 object_id\n\
\n\
float32 x_pc_centroid # center of mass of the primitive point cloud\n\
float32 y_pc_centroid\n\
float32 z_pc_centroid\n\
\n\
string shape_tag		\n\
float32[] coefficients	# depends on the primitive shape class\n\
\n\
float32 x_est_centroid  # center of mass of the primitive as estimated by ransac\n\
float32 y_est_centroid\n\
float32 z_est_centroid\n\
\n\
";
  }

  static const char* value(const ::pitt_msgs::TrackedShape_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pitt_msgs::TrackedShape_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.x_pc_centroid);
      stream.next(m.y_pc_centroid);
      stream.next(m.z_pc_centroid);
      stream.next(m.shape_tag);
      stream.next(m.coefficients);
      stream.next(m.x_est_centroid);
      stream.next(m.y_est_centroid);
      stream.next(m.z_est_centroid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedShape_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pitt_msgs::TrackedShape_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pitt_msgs::TrackedShape_<ContainerAllocator>& v)
  {
    s << indent << "object_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "x_pc_centroid: ";
    Printer<float>::stream(s, indent + "  ", v.x_pc_centroid);
    s << indent << "y_pc_centroid: ";
    Printer<float>::stream(s, indent + "  ", v.y_pc_centroid);
    s << indent << "z_pc_centroid: ";
    Printer<float>::stream(s, indent + "  ", v.z_pc_centroid);
    s << indent << "shape_tag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.shape_tag);
    s << indent << "coefficients[]" << std::endl;
    for (size_t i = 0; i < v.coefficients.size(); ++i)
    {
      s << indent << "  coefficients[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coefficients[i]);
    }
    s << indent << "x_est_centroid: ";
    Printer<float>::stream(s, indent + "  ", v.x_est_centroid);
    s << indent << "y_est_centroid: ";
    Printer<float>::stream(s, indent + "  ", v.y_est_centroid);
    s << indent << "z_est_centroid: ";
    Printer<float>::stream(s, indent + "  ", v.z_est_centroid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PITT_MSGS_MESSAGE_TRACKEDSHAPE_H
